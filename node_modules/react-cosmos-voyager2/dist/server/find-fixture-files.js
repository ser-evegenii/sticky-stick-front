"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findFixtureFiles = findFixtureFiles;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _glob = _interopRequireDefault(require("glob"));

var _micromatch = _interopRequireDefault(require("micromatch"));

var _util = _interopRequireDefault(require("util.promisify"));

var _server = require("react-cosmos-shared/server");

var _extractComponentsFromFixtureFile = require("./extract-components-from-fixture-file");

var globAsync = (0, _util.default)(_glob.default);

/**
 * Search the user code for fixture files.
 */
function findFixtureFiles(_x) {
  return _findFixtureFiles.apply(this, arguments);
}

function _findFixtureFiles() {
  _findFixtureFiles = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(args) {
    var _ref, _ref$rootPath, rootPath, _ref$fileMatch, fileMatch, _ref$fileMatchIgnore, fileMatchIgnore, _ref$exclude, exclude, excludeList, allPaths, fixturePaths, fixtureFiles, _loop, i, _ret;

    return _regenerator.default.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref = args || {}, _ref$rootPath = _ref.rootPath, rootPath = _ref$rootPath === void 0 ? process.cwd() : _ref$rootPath, _ref$fileMatch = _ref.fileMatch, fileMatch = _ref$fileMatch === void 0 ? _server.defaultFileMatch : _ref$fileMatch, _ref$fileMatchIgnore = _ref.fileMatchIgnore, fileMatchIgnore = _ref$fileMatchIgnore === void 0 ? _server.defaultFileMatchIgnore : _ref$fileMatchIgnore, _ref$exclude = _ref.exclude, exclude = _ref$exclude === void 0 ? _server.defaultExclude : _ref$exclude;
            excludeList = (0, _isArray.default)(exclude) ? exclude : [exclude];
            _context2.next = 4;
            return globAsync('**/*', {
              cwd: rootPath,
              absolute: true,
              ignore: fileMatchIgnore
            });

          case 4:
            allPaths = _context2.sent;
            fixturePaths = (0, _micromatch.default)(allPaths, fileMatch, {
              dot: true
            });
            fixtureFiles = []; // Can't use forEach because we want each (async) loop to be serial

            _loop =
            /*#__PURE__*/
            _regenerator.default.mark(function _loop(i) {
              var filePath, components;
              return _regenerator.default.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      filePath = fixturePaths[i];

                      if (!excludeList.some(function (excludePattern) {
                        return filePath.match(excludePattern);
                      })) {
                        _context.next = 3;
                        break;
                      }

                      return _context.abrupt("return", "continue");

                    case 3:
                      _context.next = 5;
                      return (0, _extractComponentsFromFixtureFile.extractComponentsFromFixtureFile)(filePath, rootPath);

                    case 5:
                      components = _context.sent;
                      fixtureFiles.push({
                        filePath: filePath,
                        components: components
                      });

                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop, this);
            });
            i = 0;

          case 9:
            if (!(i < fixturePaths.length)) {
              _context2.next = 17;
              break;
            }

            return _context2.delegateYield(_loop(i), "t0", 11);

          case 11:
            _ret = _context2.t0;

            if (!(_ret === "continue")) {
              _context2.next = 14;
              break;
            }

            return _context2.abrupt("continue", 14);

          case 14:
            i++;
            _context2.next = 9;
            break;

          case 17:
            return _context2.abrupt("return", fixtureFiles);

          case 18:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, this);
  }));
  return _findFixtureFiles.apply(this, arguments);
}