"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilePaths = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _glob = _interopRequireDefault(require("glob"));

var _matchFixturePath = _interopRequireDefault(require("./match-fixture-path"));

var _fixtureExtensions = require("./fixture-extensions");

var SPECIAL_DIRS = ['__tests__'];

var isUnderSpecialDir = function isUnderSpecialDir(filePath, fixturesDir) {
  return SPECIAL_DIRS.concat(fixturesDir).some(function (dir) {
    return filePath.indexOf("/".concat(dir, "/")) !== -1;
  });
};

var getExternalFixtures = function getExternalFixtures(fixturePaths) {
  return fixturePaths.reduce(function (prev, next) {
    return (0, _toConsumableArray2.default)(prev).concat((0, _toConsumableArray2.default)(_glob.default.sync("".concat(next, "/**/*.{").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_GLOB, "}"))));
  }, []);
};

var extractComponentName = function extractComponentName(filePath, rootPath) {
  var componentName = filePath.replace(new RegExp("^".concat(rootPath, "/?(.+)$")), '$1').replace(/\.jsx?$/, ''); // Nested components are normalized. E.g. Header/Header.jsx will only
  // show up as "Header" in the UI and will read fixtures from
  // Header/__fixtures__ or from a custom fixture path.
  // The same goes for Header/index.js

  var parts = componentName.split('/');

  if (parts.length > 1) {
    if (parts[parts.length - 1] === parts[parts.length - 2] || parts[parts.length - 1] === 'index') {
      componentName = parts.slice(0, -1).join('/');
    }
  }

  return componentName;
};

var getMatchingFixtures = function getMatchingFixtures(fixtures, componentName, fixturesDir) {
  return fixtures.reduce(function (matchingFixtures, fixturePath) {
    var fixtureName = (0, _matchFixturePath.default)(fixturePath, componentName, fixturesDir);
    return fixtureName ? (0, _objectSpread3.default)({}, matchingFixtures, (0, _defineProperty2.default)({}, fixtureName, fixturePath)) : matchingFixtures;
  }, {});
};

var getFilePaths = function getFilePaths(_ref) {
  var _ref$componentPaths = _ref.componentPaths,
      componentPaths = _ref$componentPaths === void 0 ? [] : _ref$componentPaths,
      _ref$fixturePaths = _ref.fixturePaths,
      fixturePaths = _ref$fixturePaths === void 0 ? [] : _ref$fixturePaths,
      _ref$fixturesDir = _ref.fixturesDir,
      fixturesDir = _ref$fixturesDir === void 0 ? '__fixtures__' : _ref$fixturesDir,
      _ref$ignore = _ref.ignore,
      ignore = _ref$ignore === void 0 ? [] : _ref$ignore,
      getComponentName = _ref.getComponentName,
      getFixturePathsForComponent = _ref.getFixturePathsForComponent;
  var extFixtures = getExternalFixtures(fixturePaths);
  var components = {};
  var fixtures = {};
  componentPaths.forEach(function (componentPath) {
    if (_fs.default.lstatSync(componentPath).isFile()) {
      if (typeof getComponentName !== 'function') {
        throw new TypeError('Must implement getComponentName when using exact file paths in componentPaths');
      }

      var componentDir = _path.default.dirname(componentPath);

      var componentName = getComponentName(componentPath);
      components[componentName] = componentPath;
      fixtures[componentName] = typeof getFixturePathsForComponent === 'function' ? getFixturePathsForComponent(componentName) : getMatchingFixtures((0, _toConsumableArray2.default)(_glob.default.sync("".concat(componentDir, "/**/").concat(fixturesDir, "/**/*.{").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_GLOB, "}"))).concat((0, _toConsumableArray2.default)(extFixtures)), componentName, fixturesDir);
    } else {
      var relFixtures = _glob.default.sync("".concat(componentPath, "/**/").concat(fixturesDir, "/**/*.{").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_GLOB, "}"));

      _glob.default.sync("".concat(componentPath, "/**/*.{").concat(_fixtureExtensions.COMPONENT_EXTENSIONS_GLOB, "}")).forEach(function (filePath) {
        if (isUnderSpecialDir(filePath, fixturesDir) || ignore.some(function (ignorePattern) {
          return filePath.match(ignorePattern);
        })) {
          return;
        }

        var componentName = extractComponentName(filePath, componentPath);
        components[componentName] = filePath;
        fixtures[componentName] = typeof getFixturePathsForComponent === 'function' ? getFixturePathsForComponent(componentName) : getMatchingFixtures((0, _toConsumableArray2.default)(relFixtures).concat((0, _toConsumableArray2.default)(extFixtures)), componentName, fixturesDir);
      });
    }
  });
  return {
    components: components,
    fixtures: fixtures
  };
};

exports.getFilePaths = getFilePaths;