"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fixtureExtensions = require("./fixture-extensions");

var buildPathMatchers = function buildPathMatchers(componentName, fixturesDir) {
  return ["/".concat(fixturesDir, "/").concat(componentName, "/([^/]+)\\.(").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_REGEX, ")$"), "/".concat(componentName, "/").concat(fixturesDir, "/([^/]+)\\.(").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_REGEX, ")$"), "/".concat(componentName, "/([^/]+)\\.(").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_REGEX, ")$")];
};

var buildDeprecatedPathMatchers = function buildDeprecatedPathMatchers(componentName, fixturesDir) {
  return ["/".concat(componentName, "/src/").concat(fixturesDir, "/([^/]+)\\.(").concat(_fixtureExtensions.FIXTURE_EXTENSIONS_REGEX, ")$")];
};
/**
 * Determine whether fixture belongs to component and return the fixture's
 * clean path when true.
 */


var matchFixturePath = function matchFixturePath(fixturePath, componentName, fixturesDir) {
  var matchers = buildPathMatchers(componentName, fixturesDir);

  for (var i = 0; i < matchers.length; i += 1) {
    var matchResult = fixturePath.match(new RegExp(matchers[i]));

    if (matchResult) {
      return matchResult[1];
    }
  }

  var deprecatedMatchers = buildDeprecatedPathMatchers(componentName, fixturesDir);

  for (var _i = 0; _i < deprecatedMatchers.length; _i += 1) {
    var _matchResult = fixturePath.match(new RegExp(deprecatedMatchers[_i]));

    if (_matchResult) {
      console.warn("The fixture path \"".concat(fixturePath, "\" for component name \"").concat(componentName, "\" has matched a deprecated pattern ").concat(deprecatedMatchers[_i], ", use getFixturePathsForComponent in your cosmos.config.js to handle special cases instead"));
      return _matchResult[1];
    }
  }

  return false;
};

var _default = matchFixturePath;
exports.default = _default;