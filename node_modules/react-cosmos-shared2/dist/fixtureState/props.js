"use strict";
exports.__esModule = true;
var lodash_1 = require("lodash");
var util_1 = require("../util");
exports.DEFAULT_RENDER_KEY = 0;
function getFixtureStateProps(fixtureState, decoratorId) {
    var props = fixtureState.props;
    return props
        ? props.filter(function (p) { return p.elementId.decoratorId === decoratorId; })
        : [];
}
exports.getFixtureStateProps = getFixtureStateProps;
function findFixtureStateProps(fixtureState, elementId) {
    var props = fixtureState.props;
    return props && lodash_1.find(props, function (p) { return lodash_1.isEqual(p.elementId, elementId); });
}
exports.findFixtureStateProps = findFixtureStateProps;
function createFixtureStateProps(_a) {
    var fixtureState = _a.fixtureState, elementId = _a.elementId, values = _a.values, componentName = _a.componentName;
    var _b = fixtureState.props, props = _b === void 0 ? [] : _b;
    return util_1.replaceOrAddItem(props, createPropsMatcher(elementId), {
        elementId: elementId,
        values: values,
        renderKey: exports.DEFAULT_RENDER_KEY,
        componentName: componentName
    });
}
exports.createFixtureStateProps = createFixtureStateProps;
function resetFixtureStateProps(_a) {
    var fixtureState = _a.fixtureState, elementId = _a.elementId, values = _a.values;
    var propsItem = expectFixtureStateProps(fixtureState, elementId);
    return util_1.updateItem(fixtureState.props, propsItem, {
        values: values,
        renderKey: propsItem.renderKey + 1
    });
}
exports.resetFixtureStateProps = resetFixtureStateProps;
function updateFixtureStateProps(_a) {
    var fixtureState = _a.fixtureState, elementId = _a.elementId, values = _a.values;
    var propsItem = expectFixtureStateProps(fixtureState, elementId);
    return util_1.updateItem(fixtureState.props, propsItem, {
        values: values
    });
}
exports.updateFixtureStateProps = updateFixtureStateProps;
function removeFixtureStateProps(fixtureState, elementId) {
    return util_1.removeItemMatch(fixtureState.props || [], createPropsMatcher(elementId));
}
exports.removeFixtureStateProps = removeFixtureStateProps;
function createPropsMatcher(elementId) {
    return function (p) { return lodash_1.isEqual(p.elementId, elementId); };
}
function expectFixtureStateProps(fixtureState, elementId) {
    var propsItem = findFixtureStateProps(fixtureState, elementId);
    if (!propsItem) {
        var elId = JSON.stringify(elementId);
        throw new Error("Fixture state props missing for element \"" + elId + "\"");
    }
    return propsItem;
}
