import { FixtureState } from './fixtureState';
export declare type RendererId = string;
export declare type FixtureNamesByPath = {
    [fixturePath: string]: null | string[];
};
export declare type FixtureId = {
    path: string;
    name: null | string;
};
export declare type PingRenderersRequest = {
    type: 'pingRenderers';
};
export declare type SelectFixtureRequest = {
    type: 'selectFixture';
    payload: {
        rendererId: RendererId;
        fixtureId: FixtureId;
        fixtureState: FixtureState;
    };
};
export declare type UnselectFixtureRequest = {
    type: 'unselectFixture';
    payload: {
        rendererId: RendererId;
    };
};
export declare type SetFixtureStateRequest = {
    type: 'setFixtureState';
    payload: {
        rendererId: RendererId;
        fixtureId: FixtureId;
        fixtureState: FixtureState;
    };
};
export declare type RendererRequest = PingRenderersRequest | SelectFixtureRequest | UnselectFixtureRequest | SetFixtureStateRequest;
export declare type OnRendererRequest = (msg: RendererRequest) => unknown;
export declare type RendererReadyResponse = {
    type: 'rendererReady';
    payload: {
        rendererId: RendererId;
        fixtures: FixtureNamesByPath;
    };
};
export declare type RendererErrorResponse = {
    type: 'rendererError';
    payload: {
        rendererId: RendererId;
    };
};
export declare type FixtureListUpdateResponse = {
    type: 'fixtureListUpdate';
    payload: {
        rendererId: RendererId;
        fixtures: FixtureNamesByPath;
    };
};
export declare type FixtureStateChangeResponse = {
    type: 'fixtureStateChange';
    payload: {
        rendererId: RendererId;
        fixtureId: FixtureId;
        fixtureState: FixtureState;
    };
};
export declare type RendererResponse = RendererReadyResponse | RendererErrorResponse | FixtureListUpdateResponse | FixtureStateChangeResponse;
export declare type OnRendererResponse = (msg: RendererResponse) => unknown;
export declare const RENDERER_MESSAGE_EVENT_NAME = "cosmos-cmd";
