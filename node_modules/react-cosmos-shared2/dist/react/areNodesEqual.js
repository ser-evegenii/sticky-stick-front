"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var lodash_1 = require("lodash");
var react_is_1 = require("react-is");
function areNodesEqual(a, b) {
    return lodash_1.isEqual(stripInternalElementAttrs(a), stripInternalElementAttrs(b));
}
exports.areNodesEqual = areNodesEqual;
// Don't compare private element attrs like _owner and _store, which hold
// internal details and have auto increment-type attrs
function stripInternalElementAttrs(node) {
    if (Array.isArray(node)) {
        return node.map(function (n) { return stripInternalElementAttrs(n); });
    }
    if (!react_is_1.isElement(node)) {
        return node;
    }
    var el = node;
    return __assign({}, lodash_1.pick(el, 'type', 'key', 'ref'), { 
        // children and other props can contain Elements
        props: lodash_1.mapValues(el.props, function (propValue) {
            return stripInternalElementAttrs(propValue);
        }) });
}
