"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var lodash_1 = require("lodash");
function updateItem(items, item, update) {
    var index = items.indexOf(item);
    return items.slice(0, index).concat([
        __assign({}, item, update)
    ], items.slice(index + 1));
}
exports.updateItem = updateItem;
function replaceOrAddItem(items, matcher, item) {
    var index = lodash_1.findIndex(items, matcher);
    return index !== -1
        ? items.slice(0, index).concat([item], items.slice(index + 1)) : items.concat([item]);
}
exports.replaceOrAddItem = replaceOrAddItem;
function removeItemMatch(items, matcher) {
    var index = lodash_1.findIndex(items, matcher);
    return index === -1
        ? items.slice() : items.slice(0, index).concat(items.slice(index + 1));
}
exports.removeItemMatch = removeItemMatch;
function removeItem(items, item) {
    var index = items.indexOf(item);
    if (index === -1) {
        throw new Error("Trying to remove missing list item");
    }
    return items.slice(0, index).concat(items.slice(index + 1));
}
exports.removeItem = removeItem;
function replaceKeys(str, map) {
    return Object.keys(map).reduce(function (res, key) { return res.replace(key, map[key]); }, str);
}
exports.replaceKeys = replaceKeys;
var uuid_1 = require("./uuid");
exports.uuid = uuid_1.uuid;
