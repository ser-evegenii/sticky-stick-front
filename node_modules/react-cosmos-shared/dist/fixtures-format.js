"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNormalizedFixtureModules = getNormalizedFixtureModules;
exports.getOldSchoolFixturesFromNewStyleComponents = getOldSchoolFixturesFromNewStyleComponents;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _objectSpread4 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _set = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/set"));

var _importModule = require("./import-module");

// Old fixtures don't have a `component` property. To support both old & new
// fixtures simultaneously, old style fixtures are altered on the fly by
// adding each fixture's corresponding component in the fixture body.
// FYI: deprecatedComponentModules is empty when using new style fixtures
// exclusively.
function getNormalizedFixtureModules(fixtureModules, fixtureFiles) {
  var deprecatedComponentModules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var alteredFixtures = new _set.default();
  var invalidFixtures = new _set.default();
  var modules = (0, _keys.default)(fixtureModules).reduce(function (acc, next) {
    var fixtureModule = (0, _importModule.importModule)(fixtureModules[next]); // Component seems to be up to date, no alteration needed
    // Warn: Since multi fixtures weren't supported before v3, we assume multi
    // fixtures (Array default export) to be legit new style fixtures

    if ((0, _isArray.default)(fixtureModule) || fixtureModule.component) {
      return (0, _objectSpread4.default)({}, acc, (0, _defineProperty2.default)({}, next, fixtureModule));
    }

    try {
      var fixtureFile = fixtureFiles.find(function (f) {
        return f.filePath === next;
      });

      if (!fixtureFile) {
        throw new Error("Missing fixture file for path: ".concat(next));
      }

      var components = fixtureFile.components;

      var _components = (0, _slicedToArray2.default)(components, 1),
          component1 = _components[0];

      if (!component1 || !component1.filePath) {
        throw new Error("Missing component data for fixture path: ".concat(next));
      }

      var componentModule = deprecatedComponentModules[component1.filePath];
      var component = (0, _importModule.importModule)(componentModule);
      alteredFixtures.add(next);
      return (0, _objectSpread4.default)({}, acc, (0, _defineProperty2.default)({}, next, (0, _objectSpread4.default)({}, fixtureModule, {
        component: component
      })));
    } catch (err) {
      invalidFixtures.add(next);
      return acc;
    }
  }, {});

  if (alteredFixtures.size > 0) {
    console.log("[Cosmos] Successfully read ".concat(alteredFixtures.size, " old school fixtures:"));
    console.log(getPrintableListFromPaths(alteredFixtures));
  }

  if (invalidFixtures.size > 0) {
    console.warn("[Cosmos] Failed to read ".concat(invalidFixtures.size, " fixtures:"));
    console.warn(getPrintableListFromPaths(invalidFixtures));
  }

  if (alteredFixtures.size > 0 || invalidFixtures.size > 0) {
    console.log('[Cosmos] Upgrade these fixtures by adding the `component` property.');
    console.log('[Cosmos] More details at https://github.com/react-cosmos/react-cosmos/issues/440');
  }

  return modules;
} // TEMP: The new data structures are ready on the server, but are not
// yet adopted on the client. This conversion will be removed when the Loader
// and CP start working with the types from react-cosmos-voyager2


function getOldSchoolFixturesFromNewStyleComponents(newStyleComponents) {
  var fixtures = {};
  newStyleComponents.forEach(function (c) {
    var componentName = getObjectPath(c);
    fixtures[componentName] = {};
    c.fixtures.forEach(function (f) {
      var fixtureName = getObjectPath(f);
      fixtures[componentName][fixtureName] = f.source;
    });
  });
  return fixtures;
}

function getPrintableListFromPaths(set) {
  return (0, _toConsumableArray2.default)(set.values()).map(function (f) {
    return "- ".concat(f);
  }).join('\n');
}

function getObjectPath(obj) {
  return obj.namespace ? "".concat(obj.namespace, "/").concat(obj.name) : obj.name;
}