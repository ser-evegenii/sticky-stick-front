"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStateProxy = createStateProxy;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _lodash2 = _interopRequireDefault(require("lodash.isempty"));

var _lodash3 = _interopRequireDefault(require("lodash.omit"));

function createStateProxy() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$fixtureKey = _ref.fixtureKey,
      fixtureKey = _ref$fixtureKey === void 0 ? 'state' : _ref$fixtureKey,
      _ref$updateInterval = _ref.updateInterval,
      updateInterval = _ref$updateInterval === void 0 ? 500 : _ref$updateInterval;

  var StateProxy =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2.default)(StateProxy, _Component);

    function StateProxy() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, StateProxy);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StateProxy)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "prevState", {});
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "componentRef", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "timeoutId", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onComponentRef", function (componentRef) {
        // Save component ref to be able to read its state later
        _this.componentRef = componentRef;
        var _this$props = _this.props,
            fixture = _this$props.fixture,
            onComponentRef = _this$props.onComponentRef,
            disableLocalState = _this$props.disableLocalState; // Ref callbacks are also called on unmount with null value

        if (componentRef) {
          if (disableLocalState) {
            // Bubble up component ref
            onComponentRef(componentRef);
          } else {
            // Load initial state right after component renders
            var fixtureState = fixture[fixtureKey];

            if (fixtureState) {
              injectState(componentRef, fixtureState, function () {
                // Bubble up component ref after state has been injected
                onComponentRef(componentRef);
                _this.prevState = fixtureState;

                _this.scheduleStateUpdate();
              });
            } else {
              // Bubble up component ref
              onComponentRef(componentRef); // Only poll for state changes if component has state

              var initialState = getState(componentRef);

              if (initialState) {
                _this.updateState(initialState);
              }
            }
          }
        } else {
          // Bubble up null component ref
          onComponentRef(componentRef);

          _this.clearTimeout();
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onStateUpdate", function () {
        if (_this.componentRef) {
          _this.updateState(getState(_this.componentRef));
        }
      });
      return _this;
    }

    (0, _createClass2.default)(StateProxy, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearTimeout();
      }
    }, {
      key: "updateState",
      value: function updateState(updatedState) {
        var onFixtureUpdate = this.props.onFixtureUpdate;

        if (!(0, _lodash.default)(updatedState, this.prevState)) {
          this.prevState = updatedState;
          onFixtureUpdate({
            state: updatedState
          });
        }

        this.scheduleStateUpdate();
      }
    }, {
      key: "scheduleStateUpdate",
      value: function scheduleStateUpdate() {
        // TODO: Find a better way than polling to hook into state changes
        this.timeoutId = setTimeout(this.onStateUpdate, updateInterval);
      }
    }, {
      key: "clearTimeout",
      value: function (_clearTimeout) {
        function clearTimeout() {
          return _clearTimeout.apply(this, arguments);
        }

        clearTimeout.toString = function () {
          return _clearTimeout.toString();
        };

        return clearTimeout;
      }(function () {
        if (this.timeoutId) {
          clearTimeout(this.timeoutId);
        }
      })
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            nextProxy = _this$props2.nextProxy,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["nextProxy"]);
        var NextProxy = nextProxy.value,
            next = nextProxy.next;
        return _react.default.createElement(NextProxy, (0, _extends2.default)({}, rest, {
          nextProxy: next(),
          onComponentRef: this.onComponentRef
        }));
      }
    }]);
    return StateProxy;
  }(_react.Component);

  (0, _defineProperty2.default)(StateProxy, "defaultProps", {
    // Parent proxies can enable this flag to disable this proxy
    disableLocalState: false
  });
  return StateProxy;
}

function injectState(component, state, cb) {
  var rootState = (0, _lodash3.default)(state, 'children');
  component.setState(rootState, function () {
    var children = state.children;

    if ((0, _lodash2.default)(children)) {
      cb();
      return;
    }

    var refs = component.refs;
    var promises = [];
    (0, _keys.default)(refs).forEach(function (ref) {
      var child = refs[ref];
      var childState = children[ref];

      if (!(0, _lodash2.default)(childState)) {
        promises.push(new _promise.default(function (resolve) {
          injectState(child, childState, resolve);
        }));
      }
    });

    if (promises.length === 0) {
      cb();
    } else {
      _promise.default.all(promises).then(cb);
    }
  });
}

function getState(component) {
  var state = component.state,
      refs = component.refs;

  if (!refs) {
    return state;
  }

  var children = {};
  (0, _keys.default)(refs).forEach(function (ref) {
    var child = refs[ref];
    var childState = getState(child);

    if (!(0, _lodash2.default)(childState)) {
      children[ref] = childState;
    }
  });

  if ((0, _lodash2.default)(children)) {
    return state;
  }

  return (0, _objectSpread2.default)({}, state, {
    children: children
  });
}