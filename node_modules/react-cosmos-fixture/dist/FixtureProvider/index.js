"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var React = require("react");
var memoize = require("memoize-one/dist/memoize-one.cjs");
var FixtureCapture_1 = require("../FixtureCapture");
var FixtureContext_1 = require("../FixtureContext");
// IDEA: Maybe open up Fixture component for naming and other customization. Eg.
//   <Fixture name="An interesting state">
//     <Button>Click me</button>
//   </Fixture>
var FixtureProvider = /** @class */ (function (_super) {
    __extends(FixtureProvider, _super);
    function FixtureProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // Provider value is memoized as an object with reference identity to prevent
        // unintentional renders https://reactjs.org/docs/context.html#caveats
        _this.getFixtureContextValue = memoize(function (fixtureState, setFixtureState) { return ({
            fixtureState: fixtureState,
            setFixtureState: setFixtureState
        }); });
        return _this;
    }
    FixtureProvider.prototype.render = function () {
        var _a = this.props, decorators = _a.decorators, children = _a.children, fixtureState = _a.fixtureState, setFixtureState = _a.setFixtureState;
        return (React.createElement(FixtureContext_1.FixtureContext.Provider, { value: this.getFixtureContextValue(fixtureState, setFixtureState) }, getComputedElementTree(decorators, children)));
    };
    return FixtureProvider;
}(React.PureComponent));
exports.FixtureProvider = FixtureProvider;
function getComputedElementTree(decorators, leaf) {
    var fixtureElement = (React.createElement(FixtureCapture_1.FixtureCapture, { decoratorId: "root" }, leaf));
    return decorators.slice().reverse()
        .reduce(function (prevElement, Decorator) { return React.createElement(Decorator, null, prevElement); }, fixtureElement);
}
