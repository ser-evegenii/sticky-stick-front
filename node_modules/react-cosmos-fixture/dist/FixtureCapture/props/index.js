"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var React = require("react");
var fixtureState_1 = require("react-cosmos-shared2/fixtureState");
var react_1 = require("react-cosmos-shared2/react");
var FixtureContext_1 = require("../../FixtureContext");
var nodeTree_1 = require("../shared/nodeTree");
var findRelevantElementPaths_1 = require("../shared/findRelevantElementPaths");
var componentName_1 = require("./componentName");
var extendFixtureProps_1 = require("./extendFixtureProps");
function usePropsCapture(fixture, decoratorId) {
    var _a = React.useContext(FixtureContext_1.FixtureContext), fixtureState = _a.fixtureState, setFixtureState = _a.setFixtureState;
    var prevFixtureRef = React.useRef(fixture);
    var elPaths = findRelevantElementPaths_1.findRelevantElementPaths(fixture);
    React.useEffect(function () {
        // Create empty fixture state
        if (!fixtureState.props && elPaths.length === 0) {
            // Make sure not to override any (currently pending) fixture state props
            setFixtureState(function (prevFs) { return (__assign({}, prevFs, { props: prevFs.props || [] })); });
            return;
        }
        // Remove fixture state for removed child elements (likely via HMR)
        // FIXME: Also invalidate fixture state at this element path if the
        // component type of the corresponding element changed
        var fsProps = fixtureState_1.getFixtureStateProps(fixtureState, decoratorId);
        fsProps.forEach(function (_a) {
            var elementId = _a.elementId;
            if (elPaths.indexOf(elementId.elPath) === -1) {
                setFixtureState(function (prevFs) { return (__assign({}, prevFs, { props: fixtureState_1.removeFixtureStateProps(fixtureState, elementId) })); });
            }
        });
        elPaths.forEach(function (elPath) {
            var childEl = nodeTree_1.getExpectedElementAtPath(fixture, elPath);
            var elementId = { decoratorId: decoratorId, elPath: elPath };
            // Component fixture state can be provided before the fixture mounts (eg.
            // a previous snapshot of a fixture state or the current fixture state
            // from another renderer)
            if (!fixtureState_1.findFixtureStateProps(fixtureState, elementId)) {
                var componentName_2 = componentName_1.getComponentName(childEl.type);
                setFixtureState(function (prevFs) { return (__assign({}, prevFs, { props: fixtureState_1.createFixtureStateProps({
                        fixtureState: prevFs,
                        elementId: elementId,
                        values: fixtureState_1.createValues(childEl.props),
                        componentName: componentName_2
                    }) })); });
            }
            else if (!react_1.areNodesEqual(childEl, nodeTree_1.getElementAtPath(prevFixtureRef.current, elPath))) {
                setFixtureState(function (prevFs) { return (__assign({}, prevFs, { props: fixtureState_1.updateFixtureStateProps({
                        fixtureState: fixtureState,
                        elementId: elementId,
                        values: fixtureState_1.createValues(childEl.props)
                    }) })); });
            }
        });
    }, [setFixtureState, fixture, fixtureState.props]);
    React.useEffect(function () {
        prevFixtureRef.current = fixture;
    });
    return extendFixtureProps_1.extendFixtureProps(fixture, fixtureState, decoratorId);
}
exports.usePropsCapture = usePropsCapture;
