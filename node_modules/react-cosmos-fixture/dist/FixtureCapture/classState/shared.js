"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var React = require("react");
var lodash_1 = require("lodash");
function useUnmount(cb) {
    React.useEffect(function () { return cb; }, []);
}
exports.useUnmount = useUnmount;
// We need to do this because React doesn't provide a replaceState method
// (anymore) https://reactjs.org/docs/react-component.html#setstate
function replaceState(elRef, nextState) {
    var fullState = resetOriginalKeys(elRef.state, nextState);
    if (!lodash_1.isEqual(fullState, elRef.state)) {
        elRef.setState(fullState);
    }
}
exports.replaceState = replaceState;
function resetOriginalKeys(original, current) {
    return Object.keys(original).reduce(function (result, key) {
        var _a;
        return Object.keys(result).indexOf(key) === -1
            ? __assign({}, result, (_a = {}, _a[key] = undefined, _a)) : result;
    }, current);
}
