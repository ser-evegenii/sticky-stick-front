"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var React = require("react");
var lodash_1 = require("lodash");
var fixtureState_1 = require("react-cosmos-shared2/fixtureState");
var FixtureContext_1 = require("../../FixtureContext");
var findRelevantElementPaths_1 = require("../shared/findRelevantElementPaths");
// How often to check the state of the loaded component and update the fixture
// state if it changed
var REFRESH_INTERVAL = 200;
function useReadClassState(children, decoratorId, elRefs) {
    var elPaths = findRelevantElementPaths_1.findRelevantElementPaths(children);
    var _a = React.useContext(FixtureContext_1.FixtureContext), fixtureState = _a.fixtureState, setFixtureState = _a.setFixtureState;
    var timeoutId = React.useRef(null);
    React.useEffect(function () {
        // The check should run even if no element paths are found at mount, because
        // the fixture can change during the lifecycle of a FixtureCapture instance
        // and the updated fixture might contain elements of stateful components
        scheduleStateCheck();
        return function () {
            if (timeoutId.current) {
                clearTimeout(timeoutId.current);
            }
        };
    });
    function scheduleStateCheck() {
        // Is there a better way to listen to component state changes?
        timeoutId.current = setTimeout(checkState, REFRESH_INTERVAL);
    }
    function checkState() {
        var _this = this;
        var fixtureStateChangeScheduled = false;
        Object.keys(elRefs.current).map(function (elPath) { return __awaiter(_this, void 0, void 0, function () {
            var state, elementId, fsClassState;
            return __generator(this, function (_a) {
                if (elPaths.indexOf(elPath) === -1) {
                    throw new Error("[FixtureCapture] Child ref exists for missing element path \"" + elPath + "\"");
                }
                state = elRefs.current[elPath].state;
                elementId = { decoratorId: decoratorId, elPath: elPath };
                fsClassState = fixtureState_1.findFixtureStateClassState(fixtureState, elementId);
                if (fsClassState &&
                    state &&
                    !doesFixtureStateMatchClassState(fsClassState, state)) {
                    fixtureStateChangeScheduled = true;
                    setFixtureState(function (prevFs) { return (__assign({}, prevFs, { classState: fixtureState_1.updateFixtureStateClassState({
                            fixtureState: prevFs,
                            elementId: elementId,
                            values: fixtureState_1.createValues(state)
                        }) })); });
                }
                return [2 /*return*/];
            });
        }); });
        if (!fixtureStateChangeScheduled) {
            scheduleStateCheck();
        }
    }
}
exports.useReadClassState = useReadClassState;
function doesFixtureStateMatchClassState(fsClassState, state) {
    return lodash_1.isEqual(state, fixtureState_1.extendWithValues(state, fsClassState.values));
}
