"use strict";
exports.__esModule = true;
var React = require("react");
var nodeTree_1 = require("../../shared/nodeTree");
var findRelevantElementPaths_1 = require("../../shared/findRelevantElementPaths");
var isRefSupported_1 = require("./isRefSupported");
function decorateFixtureRefs(fixture, spyRef, cachedRefHandlers) {
    var elPaths = findRelevantElementPaths_1.findRelevantElementPaths(fixture);
    return elPaths.reduce(function (decoratedFixture, elPath) {
        return nodeTree_1.setElementAtPath(decoratedFixture, elPath, function (element) {
            if (!isRefSupported_1.isRefSupported(element.type)) {
                return element;
            }
            return React.cloneElement(element, {
                ref: getDecoratedRef(element.ref, spyRef, elPath, cachedRefHandlers)
            });
        });
    }, fixture);
}
exports.decorateFixtureRefs = decorateFixtureRefs;
function getDecoratedRef(origRef, spyRef, elPath, cachedRefHandlers) {
    var found = cachedRefHandlers[elPath];
    if (found && found.origRef === origRef) {
        return found.handler;
    }
    var handler = decorateRefWithSpy(origRef, spyRef, elPath);
    cachedRefHandlers[elPath] = { origRef: origRef, handler: handler };
    return handler;
}
function decorateRefWithSpy(origRef, spyRef, elPath) {
    return function (elRef) {
        if (origRef) {
            callOriginalRef(origRef, elRef);
        }
        spyRef(elPath, elRef);
    };
}
function callOriginalRef(ref, elRef) {
    if (typeof ref === 'string') {
        console.warn('[decorateFixtureRefs] String refs are not supported');
        return;
    }
    if (typeof ref === 'function') {
        ref(elRef);
        return;
    }
    var refObj = ref;
    refObj.current = elRef;
}
