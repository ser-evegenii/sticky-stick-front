"use strict";
exports.__esModule = true;
var lodash_1 = require("lodash");
var react_is_1 = require("react-is");
var shared_1 = require("./shared");
// Why be silent about trying to fetch a node that isn't an element?
// Because users of this utility only care about elements. Whether the child
// node was removed or replaced by a different type of node (eg. string,
// array of elements, etc.) is irrelevant.
// NICETOHAVE: Assert child path validity
function getElementAtPath(node, elPath) {
    if (!react_is_1.isElement(node) && !Array.isArray(node)) {
        return null;
    }
    var rootNode = node;
    var childNode = shared_1.isRootPath(elPath) ? rootNode : lodash_1.get(rootNode, elPath);
    if (!react_is_1.isElement(childNode)) {
        return null;
    }
    return childNode;
}
exports.getElementAtPath = getElementAtPath;
function getExpectedElementAtPath(node, elPath) {
    var el = getElementAtPath(node, elPath);
    if (!el) {
        throw new Error("Element not found at path: " + elPath);
    }
    return el;
}
exports.getExpectedElementAtPath = getExpectedElementAtPath;
