"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
exports.__esModule = true;
var lodash_1 = require("lodash");
var react_is_1 = require("react-is");
var shared_1 = require("./shared");
var getElementAtPath_1 = require("./getElementAtPath");
function setElementAtPath(node, elPath, updater) {
    var childEl = getElementAtPath_1.getExpectedElementAtPath(node, elPath);
    var newEl = updater(childEl);
    if (shared_1.isRootPath(elPath)) {
        return newEl;
    }
    // _.set also accepts arrays
    // https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/isObject.js#L15-L16
    return lodash_1.set(cloneNode(node), elPath, newEl);
}
exports.setElementAtPath = setElementAtPath;
function cloneNode(value) {
    if (Array.isArray(value)) {
        return value.map(function (n) { return cloneNode(n); });
    }
    if (react_is_1.isElement(value)) {
        var el = value;
        var _a = el.props, children = _a.children, otherProps = __rest(_a, ["children"]);
        return __assign({}, el, { props: __assign({}, otherProps, { children: cloneNode(children) }) });
    }
    return value;
}
