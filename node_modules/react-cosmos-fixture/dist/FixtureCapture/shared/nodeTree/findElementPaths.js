"use strict";
exports.__esModule = true;
var lodash_1 = require("lodash");
var react_is_1 = require("react-is");
var react_1 = require("react");
var shared_1 = require("./shared");
function findElementPaths(node, curPath) {
    if (curPath === void 0) { curPath = ''; }
    if (Array.isArray(node)) {
        return lodash_1.flatten(node.map(function (child, idx) { return findElementPaths(child, curPath + "[" + idx + "]"); }));
    }
    if (!react_is_1.isElement(node)) {
        // At this point the node can be null, boolean, string, number, Portal, etc.
        // https://github.com/facebook/flow/blob/172d28f542f49bbc1e765131c9dfb9e31780f3a2/lib/react.js#L13-L20
        return [];
    }
    var element = node;
    var children = element.props.children;
    var childElPaths = 
    // Props of elements returned by render functions can't be read here
    typeof children !== 'function'
        ? findElementPaths(children, shared_1.getChildrenPath(curPath))
        : [];
    // Ignore Fragment elements, but include their children
    return element.type === react_1.Fragment ? childElPaths : [curPath].concat(childElPaths);
}
exports.findElementPaths = findElementPaths;
