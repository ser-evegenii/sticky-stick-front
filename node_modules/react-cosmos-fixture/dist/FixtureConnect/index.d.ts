import * as React from 'react';
import { FixtureState } from 'react-cosmos-shared2/fixtureState';
import { FixtureNamesByPath, FixtureId, RendererRequest, SelectFixtureRequest, SetFixtureStateRequest } from 'react-cosmos-shared2/renderer';
import { DecoratorType, DecoratorsByPath, RemoteRendererApi, FixturesByPath, SetFixtureState } from '../shared';
export declare type Props = {
    rendererId: string;
    fixtures: FixturesByPath;
    systemDecorators: DecoratorType[];
    userDecorators: DecoratorsByPath;
    onFixtureChange?: () => unknown;
} & RemoteRendererApi;
declare type State = {
    selectedFixture: null | {
        fixtureId: FixtureId;
        fixtureState: FixtureState;
        syncedFixtureState: FixtureState;
    };
    renderKey: number;
};
export declare class FixtureConnect extends React.Component<Props, State> {
    state: State;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(prevProps: Props, prevState: State): boolean;
    render(): string | JSX.Element;
    handleRequest: (msg: RendererRequest) => void;
    handleSelectFixtureRequest({ payload }: SelectFixtureRequest): void;
    handleUnselectFixtureRequest(): void;
    handleSetFixtureStateRequest({ payload }: SetFixtureStateRequest): void;
    postReadyState(): void;
    postFixtureListUpdate(): void;
    setFixtureState: SetFixtureState;
    postFixtureStateChange: (fixtureId: FixtureId, fixtureState: FixtureState) => void;
    getFixtureNames(): FixtureNamesByPath;
    fireChangeCallback(): void;
    updateSyncedFixtureState(syncedFixtureState: FixtureState): void;
}
export {};
