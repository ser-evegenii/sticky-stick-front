"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var React = require("react");
var io = require("socket.io-client");
var renderer_1 = require("react-cosmos-shared2/renderer");
var WebSockets = /** @class */ (function (_super) {
    __extends(WebSockets, _super);
    function WebSockets() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.socket = null;
        _this.onMessage = null;
        _this.handleMessage = function (msg) {
            if (_this.onMessage) {
                _this.onMessage(msg);
            }
        };
        _this.subscribe = function (onMessage) {
            _this.onMessage = onMessage;
            _this.socket = io(_this.props.url);
            _this.socket.on(renderer_1.RENDERER_MESSAGE_EVENT_NAME, _this.handleMessage);
        };
        _this.unsubscribe = function () {
            if (_this.socket) {
                _this.socket.off(renderer_1.RENDERER_MESSAGE_EVENT_NAME, _this.handleMessage);
                _this.socket = null;
                _this.onMessage = null;
            }
        };
        _this.postMessage = function (msg) {
            if (_this.socket) {
                _this.socket.emit(renderer_1.RENDERER_MESSAGE_EVENT_NAME, msg);
            }
        };
        return _this;
    }
    WebSockets.prototype.render = function () {
        var children = this.props.children;
        var _a = this, subscribe = _a.subscribe, unsubscribe = _a.unsubscribe, postMessage = _a.postMessage;
        return children({
            subscribe: subscribe,
            unsubscribe: unsubscribe,
            postMessage: postMessage
        });
    };
    return WebSockets;
}(React.Component));
exports.WebSockets = WebSockets;
