"use strict";
exports.__esModule = true;
function anyProps(args) {
    if (args === void 0) { args = {}; }
    var _a = args.decoratorId, decoratorId = _a === void 0 ? expect.any(String) : _a, _b = args.elPath, elPath = _b === void 0 ? expect.any(String) : _b, _c = args.componentName, componentName = _c === void 0 ? expect.any(String) : _c, _d = args.values, values = _d === void 0 ? expect.any(Array) : _d;
    return {
        elementId: { decoratorId: decoratorId, elPath: elPath },
        componentName: componentName,
        renderKey: expect.any(Number),
        values: values
    };
}
exports.anyProps = anyProps;
function anyClassState(args) {
    var _a = args.decoratorId, decoratorId = _a === void 0 ? expect.any(String) : _a, _b = args.elPath, elPath = _b === void 0 ? expect.any(String) : _b, values = args.values;
    return {
        elementId: { decoratorId: decoratorId, elPath: elPath },
        values: values
    };
}
exports.anyClassState = anyClassState;
function getProps(fixtureState, expectedCount) {
    if (expectedCount === void 0) { expectedCount = 1; }
    var props = fixtureState.props;
    if (!props || props.length < expectedCount) {
        throw new Error("Props missing in fixture state");
    }
    return props;
}
exports.getProps = getProps;
function getClassState(fixtureState, expectedCount) {
    if (expectedCount === void 0) { expectedCount = 1; }
    var classState = fixtureState.classState;
    if (!classState || classState.length < expectedCount) {
        throw new Error("Class state missing in fixture state");
    }
    return classState;
}
exports.getClassState = getClassState;
