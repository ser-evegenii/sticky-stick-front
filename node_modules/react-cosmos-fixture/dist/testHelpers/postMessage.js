"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var React = require("react");
var react_test_renderer_1 = require("react-test-renderer");
var __1 = require("..");
var shared_1 = require("./shared");
function mountPostMessage(args, cb) {
    return __awaiter(this, void 0, void 0, function () {
        function getMessages() {
            return onMessage.mock.calls.map(function (call) { return call[0].data; });
        }
        function postMessage(msg) {
            parent.postMessage(msg, '*');
            // window message events are received in the next
            // frame, which is why we have to skip a loop before
            // executing React updates
            setTimeout(function () {
                react_test_renderer_1.act(function () { });
            });
        }
        function cleanup() {
            window.removeEventListener('message', onMessage);
        }
        var onMessage, renderer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onMessage = jest.fn();
                    window.addEventListener('message', onMessage, false);
                    expect.hasAssertions();
                    renderer = react_test_renderer_1.create(getElement(args));
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4 /*yield*/, cb(__assign({ renderer: renderer, update: function (newArgs) {
                                return react_test_renderer_1.act(function () {
                                    renderer.update(getElement(newArgs));
                                });
                            } }, shared_1.createFixtureConnectMockApi({ getMessages: getMessages, postMessage: postMessage })))];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    renderer.unmount();
                    cleanup();
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.mountPostMessage = mountPostMessage;
function getElement(args) {
    return React.createElement(__1.PostMessage, null, shared_1.createFixtureConnectRenderCb(args));
}
