"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateModulesFile = generateModulesFile;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _path = require("path");

var _fs = require("fs");

var _util = _interopRequireDefault(require("util.promisify"));

var _server = require("react-cosmos-shared/server");

var _server2 = require("react-cosmos-voyager2/server");

var writeFileAsync = (0, _util.default)(_fs.writeFile);
var TEMPLATE = "// This file is automatically generated by Cosmos. Best ignore it.\nexport const options = {\n  port: PORT\n};\n\nexport function getUserModules() {\n  return {\n    fixtureModules: FIXTURE_MODULES,\n    fixtureFiles: FIXTURE_FILES,\n    proxies: PROXIES\n  }\n};\n";

function generateModulesFile(_x) {
  return _generateModulesFile.apply(this, arguments);
}

function _generateModulesFile() {
  _generateModulesFile = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(cosmosConfig) {
    var modulesPath, modules, relModulesPath;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            modulesPath = cosmosConfig.modulesPath;
            _context.next = 3;
            return generateModuleImports(cosmosConfig);

          case 3:
            modules = _context.sent;
            _context.next = 6;
            return writeFileAsync(modulesPath, modules, 'utf8');

          case 6:
            relModulesPath = (0, _path.relative)(process.cwd(), modulesPath);
            console.log("[Cosmos] Generated ".concat(relModulesPath));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _generateModulesFile.apply(this, arguments);
}

function generateModuleImports(_x2) {
  return _generateModuleImports.apply(this, arguments);
}

function _generateModuleImports() {
  _generateModuleImports = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(cosmosConfig) {
    var rootPath, fileMatch, fileMatchIgnore, exclude, proxiesPath, port, fixtureFiles, fixturePaths, fixtureModuleCalls;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            rootPath = cosmosConfig.rootPath, fileMatch = cosmosConfig.fileMatch, fileMatchIgnore = cosmosConfig.fileMatchIgnore, exclude = cosmosConfig.exclude, proxiesPath = cosmosConfig.proxiesPath, port = cosmosConfig.port;
            _context2.next = 3;
            return (0, _server2.findFixtureFiles)({
              rootPath: rootPath,
              fileMatch: fileMatch,
              fileMatchIgnore: fileMatchIgnore,
              exclude: exclude
            });

          case 3:
            fixtureFiles = _context2.sent;
            fixturePaths = fixtureFiles.map(function (file) {
              return file.filePath;
            });
            fixtureModuleCalls = convertPathsToRequireCalls(fixturePaths);
            return _context2.abrupt("return", TEMPLATE.replace(/PORT/, String(port)).replace(/FIXTURE_MODULES/g, fixtureModuleCalls).replace(/FIXTURE_FILES/g, (0, _stringify.default)(fixtureFiles)).replace(/PROXIES/g, (0, _server.moduleExists)(proxiesPath) ? convertPathToRequireCall(proxiesPath) : '[]'));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _generateModuleImports.apply(this, arguments);
}

function convertPathsToRequireCalls(paths) {
  var entries = paths.map(function (p) {
    return "'".concat(p, "':").concat(convertPathToRequireCall(p));
  });
  return "{".concat(entries.join(","), "}");
}

function convertPathToRequireCall(p) {
  return "require('".concat(p, "')");
}