"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = startServer;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _lodash = require("lodash");

var _reactCosmosConfig = require("react-cosmos-config");

var _server = require("../shared/server");

var _socket = require("../shared/socket");

var _generateModulesFile = require("./generate-modules-file");

function startServer() {
  return _startServer.apply(this, arguments);
}

function _startServer() {
  _startServer = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2() {
    var cosmosConfig, publicPath, publicUrl, app, _createServer, server, startServer, stopServer, closeSockets, watcher;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            cosmosConfig = (0, _reactCosmosConfig.getCosmosConfig)();
            publicPath = cosmosConfig.publicPath, publicUrl = cosmosConfig.publicUrl;
            _context2.next = 4;
            return (0, _generateModulesFile.generateModulesFile)(cosmosConfig);

          case 4:
            app = (0, _server.createServerApp)({
              cosmosConfig: cosmosConfig,
              playgroundOpts: getPlaygroundOpts(cosmosConfig)
            });
            _createServer = (0, _server.createServer)(cosmosConfig, app), server = _createServer.server, startServer = _createServer.startServer, stopServer = _createServer.stopServer;

            if (publicPath) {
              (0, _server.serveStaticDir)(app, publicUrl, publicPath);
            }

            closeSockets = (0, _socket.attachSockets)(server);
            _context2.next = 10;
            return startServer();

          case 10:
            _context2.next = 12;
            return startFixtureFileWatcher(cosmosConfig);

          case 12:
            watcher = _context2.sent;
            return _context2.abrupt("return",
            /*#__PURE__*/
            (0, _asyncToGenerator2.default)(
            /*#__PURE__*/
            _regenerator.default.mark(function _callee() {
              return _regenerator.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      watcher.close();
                      _context.next = 3;
                      return closeSockets();

                    case 3:
                      _context.next = 5;
                      return stopServer();

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            })));

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _startServer.apply(this, arguments);
}

function getPlaygroundOpts(_ref) {
  var rootPath = _ref.rootPath,
      plugin = _ref.plugin;
  return {
    platform: 'native',
    projectKey: rootPath,
    plugin: plugin
  };
}

function startFixtureFileWatcher(_x) {
  return _startFixtureFileWatcher.apply(this, arguments);
}

function _startFixtureFileWatcher() {
  _startFixtureFileWatcher = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(cosmosConfig) {
    var rootPath, fileMatch;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            rootPath = cosmosConfig.rootPath, fileMatch = cosmosConfig.fileMatch;
            return _context3.abrupt("return", new _promise.default(function (resolve) {
              var watcher = _chokidar.default.watch(fileMatch, {
                ignored: getNormalizedIgnores(cosmosConfig),
                ignoreInitial: true,
                cwd: rootPath
              }).on('ready', function () {
                return resolve(watcher);
              }).on('all', (0, _lodash.debounce)(function () {
                // Rebuild cosmos.modules file on fixture file changes
                (0, _generateModulesFile.generateModulesFile)(cosmosConfig);
              }, 50));
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _startFixtureFileWatcher.apply(this, arguments);
}

function getNormalizedIgnores(_ref2) {
  var fileMatchIgnore = _ref2.fileMatchIgnore,
      exclude = _ref2.exclude;
  return (0, _isArray.default)(exclude) ? [fileMatchIgnore].concat((0, _toConsumableArray2.default)(exclude)) : [fileMatchIgnore, exclude];
}