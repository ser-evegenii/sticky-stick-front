"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateExport = generateExport;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _importFrom = require("import-from");

var _reactCosmosConfig = require("react-cosmos-config");

var _playgroundHtml = require("../shared/playground-html");

var _configNext = require("../shared/config-next");

var _enhanceWebpackConfig = _interopRequireDefault(require("./webpack/enhance-webpack-config"));

var _userWebpackConfig = require("./webpack/user-webpack-config");

var _playgroundOpts = require("./playground-opts");

var exportPlaygroundFiles = function exportPlaygroundFiles(cosmosConfig, outputPath) {
  var next = cosmosConfig.next;

  _fsExtra.default.copySync(_path.default.join(__dirname, '../shared/static/favicon.ico'), "".concat(outputPath, "/_cosmos.ico"));

  _fsExtra.default.copySync(require.resolve(next ? 'react-cosmos-playground2' : 'react-cosmos-playground'), "".concat(outputPath, "/_playground.js"));

  var playgroundOpts = (0, _playgroundOpts.getPlaygroundOpts)(cosmosConfig);
  var playgroundHtml = next ? (0, _playgroundHtml.getPlaygroundHtmlNext)((0, _configNext.getPlaygroundConfig)({
    playgroundOpts: playgroundOpts,
    devServerOn: false
  })) : (0, _playgroundHtml.getPlaygroundHtml)(playgroundOpts);

  _fsExtra.default.writeFileSync("".concat(outputPath, "/index.html"), playgroundHtml);
};

var runWebpackCompiler = function runWebpackCompiler(webpack, config) {
  return new _promise.default(function (resolve, reject) {
    var compiler = webpack(config);
    compiler.run(function (err, stats) {
      if (err) {
        reject(err);
      } else if (stats.hasErrors()) {
        var error = new Error('Errors occurred'); // $FlowFixMe

        error.webpackErrors = stats.toJson().errors;
        reject(error);
      } else {
        resolve(stats);
      }
    });
  });
};

function generateExport() {
  return _generateExport.apply(this, arguments);
}

function _generateExport() {
  _generateExport = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    var cosmosConfig, rootPath, outputPath, publicPath, publicUrl, webpack, userWebpackConfig, loaderWebpackConfig, exportPublicPath;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cosmosConfig = (0, _reactCosmosConfig.getCosmosConfig)();
            rootPath = cosmosConfig.rootPath, outputPath = cosmosConfig.outputPath, publicPath = cosmosConfig.publicPath, publicUrl = cosmosConfig.publicUrl;
            webpack = (0, _importFrom.silent)(rootPath, 'webpack');

            if (webpack) {
              _context.next = 7;
              break;
            }

            console.warn('[Cosmos] webpack dependency missing!');
            console.log('Install using "yarn add webpack" or "npm install webpack"');
            return _context.abrupt("return");

          case 7:
            userWebpackConfig = (0, _userWebpackConfig.getUserWebpackConfig)(cosmosConfig);
            loaderWebpackConfig = (0, _enhanceWebpackConfig.default)({
              webpack: webpack,
              userWebpackConfig: userWebpackConfig,
              shouldExport: true
            }); // Copy static files first, so that the built index.html overrides the its
            // template file (in case the static assets are served from the root path)

            if (publicPath) {
              if (outputPath.indexOf(publicPath) === -1) {
                exportPublicPath = _path.default.join(outputPath, publicUrl);

                if (_fsExtra.default.existsSync(publicPath)) {
                  _fsExtra.default.copySync(publicPath, exportPublicPath);
                } else {
                  console.log('[Cosmos] Warning: config.publicPath points to missing dir', publicPath);
                }
              } else {
                console.warn("[Cosmos] Warning: Can't export public path because it contains the export path! (avoiding infinite loop)");
                console.warn('Public path:', publicPath);
                console.warn('Export path:', outputPath);
              }
            }

            _context.next = 12;
            return runWebpackCompiler(webpack, loaderWebpackConfig).then(function () {
              exportPlaygroundFiles(cosmosConfig, outputPath);
            }).then(function () {
              console.log('[Cosmos] Export Complete! Find the exported files here:');
              console.log(outputPath);
            }, function (err) {
              console.error('[Cosmos] Export Failed! See errors below:\n');

              if (err.webpackErrors) {
                err.webpackErrors.forEach(function (error) {
                  console.error("".concat(error, "\n"));
                });
              } else {
                console.error(err);
              }

              process.exit(1);
            });

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _generateExport.apply(this, arguments);
}