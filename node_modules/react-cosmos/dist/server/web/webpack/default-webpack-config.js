"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDefaultWebpackConfig;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

var _resolveFrom = require("resolve-from");

var _importFrom = require("import-from");

// This config doesn't have entry and output set up because it's not meant to
// work standalone. react-cosmos adds an entry & output when extending this.
function getDefaultWebpackConfig(rootPath) {
  // react-cosmos doesn't directly depend on any webpack loader.
  // Instead, it leverages the ones already installed by the user.
  var babelLoaderPath = (0, _resolveFrom.silent)(rootPath, 'babel-loader');
  var styleLoaderPath = (0, _resolveFrom.silent)(rootPath, 'style-loader');
  var cssLoaderPath = (0, _resolveFrom.silent)(rootPath, 'css-loader'); // Note: Since webpack >= v2.0.0, importing of JSON files will work by default

  var jsonLoaderPath = (0, _resolveFrom.silent)(rootPath, 'json-loader');
  var rules = [];

  if (babelLoaderPath) {
    rules.push({
      test: /\.jsx?$/,
      loader: babelLoaderPath,
      exclude: [/node_modules/, // The following rules only apply in the monorepo. In a user codebase
      // all react cosmos packages will match the node_modules pattern above
      // TODO: Source files are still compiled by Babel when compiling
      // renderer build inside Jest tests. In the future we should extract
      // those high-level tests and always run them against built packages.
      /packages(\/|\\)react-cosmos([a-z0-9-]*)(\/|\\)dist/, /packages(\/|\\)react-cosmos([a-z0-9-]*)(\/|\\)[a-z0-9-]+.js$/]
    }); // This only applies to users who install `react-cosmos-flow`, which
    // requires them to have Flow compilation included in their Babel config
    // Deprecated by: https://github.com/react-cosmos/react-cosmos/pull/785

    rules.push({
      test: /\.js$/,
      loader: babelLoaderPath,
      include: /react-cosmos-flow/
    });
  }

  if (styleLoaderPath) {
    rules.push({
      test: /\.css$/,
      loader: cssLoaderPath ? "".concat(styleLoaderPath, "!").concat(cssLoaderPath) : styleLoaderPath,
      exclude: /node_modules/
    }); // Preprocess 3rd party .css files located in node_modules

    rules.push({
      test: /\.css$/,
      loader: cssLoaderPath ? "".concat(styleLoaderPath, "!").concat(cssLoaderPath) : styleLoaderPath,
      include: /node_modules/
    });
  }

  if (jsonLoaderPath) {
    rules.push({
      test: /\.json$/,
      loader: jsonLoaderPath,
      exclude: /node_modules/
    });
  }

  var HtmlWebpackPlugin = (0, _importFrom.silent)(rootPath, 'html-webpack-plugin');
  var plugins = [];

  if (HtmlWebpackPlugin) {
    plugins.push(new HtmlWebpackPlugin({
      title: 'React Cosmos',
      filename: '_loader.html'
    }));
  }

  var config = {
    // Besides other advantages, cheap-module-source-map is compatible with
    // React.componentDidCatch https://github.com/facebook/react/issues/10441
    devtool: 'cheap-module-source-map',
    resolve: {
      // Warning: webpack 1.x expects ['', '.js', '.jsx']
      extensions: ['.js', '.jsx']
    },
    module: {
      // Note: `module.rules` only works with webpack >=2.x. For 1.x
      // compatibility a custom webpack config (with module.loaders) is required
      rules: rules
    },
    plugins: plugins
  }; // Add mode option for webpack 4+

  var webpack = (0, _importFrom.silent)(rootPath, 'webpack');

  if (webpack.version && (0, _parseInt2.default)(webpack.version, 10) >= 4) {
    // Disallow non dev/prod environments, like "test" inside Jest, because
    // they are not supported by webpack
    var mode = process.env.NODE_ENV === 'production' ? 'production' : 'development';
    config = (0, _objectSpread2.default)({}, config, {
      mode: mode,
      optimization: {
        // Cosmos reads component names at run-time, so it is crucial to not
        // minify even when building with production env (ie. when exporting)
        // https://github.com/react-cosmos/react-cosmos/issues/701
        minimize: false
      }
    });
  }

  return config;
}