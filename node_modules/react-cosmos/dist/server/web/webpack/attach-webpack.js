"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachWebpack = attachWebpack;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("util.promisify"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _server = require("../../shared/server");

var _enhanceWebpackConfig = _interopRequireDefault(require("./enhance-webpack-config"));

function attachWebpack(_ref) {
  var cosmosConfig = _ref.cosmosConfig,
      app = _ref.app,
      webpack = _ref.webpack,
      userWebpackConfig = _ref.userWebpackConfig;
  var publicUrl = cosmosConfig.publicUrl,
      hot = cosmosConfig.hot;
  var loaderWebpackConfig = (0, _enhanceWebpackConfig.default)({
    webpack: webpack,
    userWebpackConfig: userWebpackConfig
  });
  var webpackCompiler = webpack(loaderWebpackConfig);
  webpackCompiler.plugin('invalid', function (filePath) {
    // Old versions of webpack call this hook without a file path argument
    if (typeof filePath === 'string') {
      var relFilePath = _path.default.relative(process.cwd(), filePath);

      console.log('[Cosmos] webpack build invalidated by', relFilePath);
    }
  });
  var onWebpackDone = new _promise.default(function (resolve) {
    webpackCompiler.plugin('done', function () {
      return resolve(true);
    });
  });
  console.log('[Cosmos] Building webpack...');
  var wdmInst = (0, _webpackDevMiddleware.default)(webpackCompiler, {
    // publicPath is the base path for the webpack assets and has to match
    // webpack.output.path
    publicPath: (0, _server.getRootUrl)(publicUrl),
    logLevel: 'warn'
  });
  app.use(wdmInst);

  if (hot) {
    app.use((0, _webpackHotMiddleware.default)(webpackCompiler));
  }

  function stopWebpack() {
    return (0, _util.default)(wdmInst.close.bind(wdmInst))();
  }

  return {
    onWebpackDone: onWebpackDone,
    stopWebpack: stopWebpack
  };
}