"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = startServer;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _importFrom = require("import-from");

var _reactCosmosConfig = require("react-cosmos-config");

var _userWebpackConfig = require("./webpack/user-webpack-config");

var _server = require("../shared/server");

var _socket = require("../shared/socket");

var _attachWebpack2 = require("./webpack/attach-webpack");

var _openFile = _interopRequireDefault(require("./plugins/openFile"));

var _playgroundOpts = require("./playground-opts");

function startServer() {
  return _startServer.apply(this, arguments);
}

function _startServer() {
  _startServer = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2() {
    var generatedConfigFor, cosmosConfig, next, rootPath, publicUrl, webpack, userWebpackConfig, app, _createServer, server, startServer, stopServer, publicPath, _attachWebpack, onWebpackDone, stopWebpack, closeSockets;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(0, _reactCosmosConfig.hasUserCosmosConfig)()) {
              generatedConfigFor = (0, _reactCosmosConfig.generateCosmosConfig)();

              if (generatedConfigFor) {
                console.log("[Cosmos] Nice! You're using ".concat(generatedConfigFor));
                console.log('[Cosmos] Generated a tailored config file for your setup');
              }
            }

            cosmosConfig = (0, _reactCosmosConfig.getCosmosConfig)();
            next = cosmosConfig.next, rootPath = cosmosConfig.rootPath, publicUrl = cosmosConfig.publicUrl;

            if (cosmosConfig.proxies) {
              console.warn('[Cosmos] Warning: config.proxies is deprecated!');
              console.warn('Please check latest proxy docs: https://github.com/react-cosmos/react-cosmos#proxies');
            }

            webpack = (0, _importFrom.silent)(rootPath, 'webpack');

            if (webpack) {
              _context2.next = 9;
              break;
            }

            console.warn('[Cosmos] webpack dependency missing!');
            console.log('Install using "yarn add webpack" or "npm install webpack"');
            return _context2.abrupt("return", function () {});

          case 9:
            userWebpackConfig = (0, _userWebpackConfig.getUserWebpackConfig)(cosmosConfig);
            app = (0, _server.createServerApp)({
              cosmosConfig: cosmosConfig,
              playgroundOpts: (0, _playgroundOpts.getPlaygroundOpts)(cosmosConfig)
            });
            _createServer = (0, _server.createServer)(cosmosConfig, app), server = _createServer.server, startServer = _createServer.startServer, stopServer = _createServer.stopServer;
            publicPath = getPublicPath(cosmosConfig, userWebpackConfig);

            if (publicPath) {
              (0, _server.serveStaticDir)(app, publicUrl, publicPath);
            }

            (0, _server.attachStackFrameEditorLauncher)(app);

            if (next) {
              (0, _openFile.default)({
                app: app,
                cosmosConfig: cosmosConfig
              });
            }

            _attachWebpack = (0, _attachWebpack2.attachWebpack)({
              cosmosConfig: cosmosConfig,
              app: app,
              webpack: webpack,
              userWebpackConfig: userWebpackConfig
            }), onWebpackDone = _attachWebpack.onWebpackDone, stopWebpack = _attachWebpack.stopWebpack;
            closeSockets = next ? (0, _socket.attachSockets)(server) : function () {};
            _context2.next = 20;
            return startServer();

          case 20:
            _context2.next = 22;
            return onWebpackDone;

          case 22:
            return _context2.abrupt("return",
            /*#__PURE__*/
            (0, _asyncToGenerator2.default)(
            /*#__PURE__*/
            _regenerator.default.mark(function _callee() {
              return _regenerator.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return stopWebpack();

                    case 2:
                      closeSockets();
                      _context.next = 5;
                      return stopServer();

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            })));

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _startServer.apply(this, arguments);
}

function getPublicPath(cosmosConfig, webpackConfig) {
  return cosmosConfig.publicPath || webpackConfig.devServer && webpackConfig.devServer.contentBase;
}