"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mount = mount;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _dom = require("react-cosmos-shared2/dom");

var _reactCosmosFixture = require("react-cosmos-fixture");

var _userModules = require("./userModules");

var _ErrorCatch = require("./ErrorCatch");

function mount(_ref) {
  var rendererId = _ref.rendererId,
      rendererConfig = _ref.rendererConfig,
      onFixtureChange = _ref.onFixtureChange;
  (0, _reactDom.render)(wrapSuitableAdaptor(createFixtureConnectRenderCb(rendererId, onFixtureChange)), (0, _dom.getDomContainer)(rendererConfig.containerQuerySelector));
}

function wrapSuitableAdaptor(element) {
  if (isInsideIframe()) {
    return _react.default.createElement(_reactCosmosFixture.PostMessage, null, element);
  }

  return _react.default.createElement(_reactCosmosFixture.WebSockets, {
    url: getWebSocketsUrl()
  }, element);
}

function createFixtureConnectRenderCb(rendererId, onFixtureChange) {
  return function (_ref2) {
    var subscribe = _ref2.subscribe,
        unsubscribe = _ref2.unsubscribe,
        postMessage = _ref2.postMessage;
    return _react.default.createElement(_reactCosmosFixture.FixtureConnect, {
      rendererId: rendererId,
      fixtures: _userModules.fixtures,
      systemDecorators: [_ErrorCatch.ErrorCatch],
      userDecorators: _userModules.decorators,
      subscribe: subscribe,
      unsubscribe: unsubscribe,
      postMessage: postMessage,
      onFixtureChange: onFixtureChange
    });
  };
}

function isInsideIframe() {
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
}

function getWebSocketsUrl() {
  // TODO: Allow user to input URL
  return location.origin;
}