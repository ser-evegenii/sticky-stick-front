"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorCatch = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("react-cosmos-shared2/react");

/* eslint-env browser */
var ErrorCatch =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(ErrorCatch, _Component);

  function ErrorCatch() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ErrorCatch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ErrorCatch)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      error: null
    });
    return _this;
  }

  (0, _createClass2.default)(ErrorCatch, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      this.setState({
        error: "".concat(error.message, "\n").concat(info.componentStack)
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // A change in children signifies that the problem that caused the current
      // error might've been solved. If the error persists, it will organically
      // trigger the error state again in the next update
      if (this.state.error && !(0, _react2.areNodesEqual)(this.props.children, prevProps.children)) {
        this.setState({
          error: null
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.state.error ? this.renderError(this.state.error) : this.props.children;
    }
  }, {
    key: "renderError",
    value: function renderError(error) {
      // NOTE: In dev mode this output is overlayed by react-error-overlay,
      // which has greater UI and detail. But the information rendered here is
      // most useful in static exports, where react-error-overlay is missing.
      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("p", null, _react.default.createElement("strong", null, "Ouch, something wrong!")), _react.default.createElement("pre", null, error), _react.default.createElement("p", null, "Check console for more info."));
    }
  }]);
  return ErrorCatch;
}(_react.Component);

exports.ErrorCatch = ErrorCatch;