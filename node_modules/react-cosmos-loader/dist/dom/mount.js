"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mount = mount;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _ErrorCatchProxy = require("../components/ErrorCatchProxy");

var _renderer = require("./renderer");

var _connectLoader = require("../connect-loader");

var ErrorCatchProxy;

function mount(_x) {
  return _mount.apply(this, arguments);
}

function _mount() {
  _mount = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(args) {
    var proxies, fixtures, loaderOpts, dismissRuntimeErrors, renderer, destroyLoader;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            proxies = args.proxies, fixtures = args.fixtures, loaderOpts = args.loaderOpts, dismissRuntimeErrors = args.dismissRuntimeErrors;
            renderer = (0, _renderer.createDomRenderer)(loaderOpts); // Reuse proxy instances

            if (!ErrorCatchProxy) {
              ErrorCatchProxy = (0, _ErrorCatchProxy.createErrorCatchProxy)();
            }

            _context.next = 5;
            return (0, _connectLoader.connectLoader)({
              renderer: renderer,
              proxies: [ErrorCatchProxy].concat((0, _toConsumableArray2.default)(proxies)),
              fixtures: fixtures,
              subscribe: subscribe,
              unsubscribe: unsubscribe,
              sendMessage: sendMessage,
              dismissRuntimeErrors: dismissRuntimeErrors
            });

          case 5:
            destroyLoader = _context.sent;
            return _context.abrupt("return", function destroy() {
              destroyLoader();
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _mount.apply(this, arguments);
}

var connectMsgHandler;

function subscribe(msgHandler) {
  connectMsgHandler = msgHandler;
  window.addEventListener('message', onMessage, false);
}

function unsubscribe() {
  window.removeEventListener('message', onMessage);
}

function onMessage(_ref) {
  var data = _ref.data;

  if (connectMsgHandler) {
    connectMsgHandler(data);
  }
}

function sendMessage(msg) {
  parent.postMessage(msg, '*');
}