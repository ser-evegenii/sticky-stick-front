"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CosmosNativeLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _socket = _interopRequireDefault(require("socket.io-client"));

var _urlParse = _interopRequireDefault(require("url-parse"));

var _reactCosmosShared = require("react-cosmos-shared");

var _client = require("react-cosmos-voyager2/client");

var _connectLoader = require("./connect-loader");

// https://github.com/facebook/react-native/issues/19797
// $FlowFixMe
var socket;
var destroyLoader;

var CosmosNativeLoader =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(CosmosNativeLoader, _Component);

  function CosmosNativeLoader() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, CosmosNativeLoader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CosmosNativeLoader)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      element: null
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "unmounted", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "initLoader",
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var _this$props, port, _this$props$modules, fixtureFiles, fixtureModules, proxies, components, fixtures;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$props = _this.props, port = _this$props.options.port, _this$props$modules = _this$props.modules, fixtureFiles = _this$props$modules.fixtureFiles, fixtureModules = _this$props$modules.fixtureModules, proxies = _this$props$modules.proxies;
              components = (0, _client.getComponents)({
                fixtureFiles: fixtureFiles,
                fixtureModules: (0, _reactCosmosShared.getNormalizedFixtureModules)(fixtureModules, fixtureFiles)
              });
              fixtures = (0, _reactCosmosShared.getOldSchoolFixturesFromNewStyleComponents)(components);
              socket = (0, _socket.default)(getSocketUrl(port));
              _context.next = 6;
              return (0, _connectLoader.connectLoader)({
                renderer: _this.loaderRenderer,
                proxies: (0, _reactCosmosShared.importModule)(proxies),
                fixtures: fixtures,
                subscribe: subscribe,
                unsubscribe: unsubscribe,
                sendMessage: sendMessage
              });

            case 6:
              destroyLoader = _context.sent;

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "loaderRenderer", function (element) {
      _this.setState({
        element: element
      });

      return {
        unmount: function unmount() {
          if (!_this.unmounted) {
            _this.setState({
              element: null
            });
          }
        },
        toJSON: function toJSON() {
          return null;
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(CosmosNativeLoader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.initLoader();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmounted = true;

      if (destroyLoader) {
        destroyLoader();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var element = this.state.element;
      return element || _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, null, "No fixture selected"));
    }
  }]);
  return CosmosNativeLoader;
}(_react.Component);

exports.CosmosNativeLoader = CosmosNativeLoader;

function subscribe(msgHandler) {
  socket.on('cosmos-cmd', msgHandler);
}

function unsubscribe() {
  // .off without a fn is actually supported
  // https://github.com/component/emitter#emitteroffevent-fn
  // $FlowFixMe
  socket.off('cosmos-cmd');
}

function sendMessage(msg) {
  socket.emit('cosmos-cmd', msg);
}

function getSocketUrl(port) {
  var host = (0, _urlParse.default)(_reactNative.NativeModules.SourceCode.scriptURL).hostname;
  return "ws://".concat(host, ":").concat(port);
}